"""
Created on Thr Aug 19 13:36:00 2021

@author: chc620

Purpose: Import pathways generated by RING and calculate the thermo properties for each pathways
"""

import numpy as np
import pandas as pd
import re
import os
import h5py

#call database
h5py_filename = '/home/chc620/isofragment+torchANI/molecule_properties_Feb09_dup'
# h5py_filename = "./molecule_properties_June15_conformer200"
# h5py_filename_IsoH = './Isofragment_Enthalpy_Dec2'

propertiesTorchANI_h5py = h5py.File('%s.hdf5' % h5py_filename , 'r')
# propertiesIso_h5py = h5py.File('%s.hdf5' % h5py_filename_IsoH , 'r')

def remove_duplicate(list_to_clear):
    return list(dict.fromkeys(list_to_clear))

# for N in range(5):
# Output(Analysis Result)

# Input (pathways file)
# filename = "./InputTxt/Pathways_benzene_C12.txt"
# filename=['./InputTxt/Pathways_benzene_C13.txt', './InputTxt/Pathways_toluene_C13.txt']#,'./InputTxt/Pathways_benzene_C15.txt','./InputTxt/Pathways_toluene_C15.txt']
#         # './InputTxt/Pathways_benzene_3-ethyl-hexane.txt','./InputTxt/Pathways_toluene_2-methyl-heptane.txt','./InputTxt/Pathways_toluene_3-methyl-heptane.txt',\
# # './InputTxt/Pathways_toluene_4-methyl-heptane.txt','./InputTxt/Pathways_toluene_3-ethyl-hexane.txt']
# reactants=['C(CCCCCCCCCCC)C','C(CCCCCCCCCCC)C'] #,'C(CCCCCCCCCCCCC)C','C(CCCCCCCCCCCCC)C'] #,'C(CC)(CCCC)C','C(CCC)(CCC)C','C(CC)(CC)CCC','C(CCCCC)(C)C','C(CC)(CCCC)C','C(CCC)(CCC)C','C(CC)(CC)CCC']


"""
for multiple files with pattern name
"""
filename = []
reactants= []

# for N in range(78):
#     # AA_file = '/home/chc620/RING/Alkylaromatics_upcycling_Feb09PCP/Pathways_AA_%s.txt' % N
#     AA_file = '/home/chc620/RING-intel/Upcycling_r1/Pathways_HS_%s.txt' % N
#     filename.append(AA_file)
#     reactants.append('C(CCCCCCCC)C')

# for N in range(78):
#     BenzeneF='./InputTxt/Pathways_benzene_C%s.txt' % (N+8)
#     filename.append(BenzeneF)
#     BenzeneR='C(%s)C' % ((N+6)*"C")
#     reactants.append(BenzeneR)
#     TolueneF='./InputTxt/Pathways_toluene_C%s.txt' % (N+8)
#     filename.append(TolueneF)
#     TolueneR='C(%s)C' % ((N+6)*"C")
#     reactants.append(TolueneR)

# filename = ['./InputTxt/Pathways_AA_1.txt','./InputTxt/Pathways_AA_2.txt','./InputTxt/Pathways_AA_3.txt','./InputTxt/Pathways_AA_4.txt']
filename = ['./Pathways_HS_6.txt','./Pathways_HS_7.txt','./Pathways_HS_8.txt','./Pathways_HS_12.txt'\
    ,'./Pathways_HS_21.txt','./Pathways_HS_27.txt','./Pathways_HS_28.txt','./Pathways_HS_29.txt'\
    ,'./Pathways_HS_30.txt','./Pathways_HS_31.txt','./Pathways_HS_38.txt','./Pathways_HS_63.txt'\
    ,'./Pathways_HS_64.txt','./Pathways_HS_65.txt','./Pathways_HS_66.txt','./Pathways_HS_67.txt'\
    ,'./Pathways_HS_68.txt','./Pathways_HS_69.txt','./Pathways_HS_70.txt','./Pathways_HS_71.txt'\
    ,'./Pathways_HS_77.txt']
# filename = ['./Pathways_HS_77.txt']
reactants = ['C(CCCCCCCC)C'] *21
# reactants = ['C(CCCCCCCC)C','C(CCCCCCCC)C','C(CCCCCCCC)C','C(CCCCCCCC)C']
Store = ['./Pathways_AnaResult_HS_6.txt','./Pathways_AnaResult_HS_7.txt','./Pathways_AnaResult_HS_8.txt','./Pathways_AnaResult_HS_12.txt'\
    ,'./Pathways_AnaResult_HS_21.txt','./Pathways_AnaResult_HS_27.txt','./Pathways_AnaResult_HS_28.txt','./Pathways_AnaResult_HS_29.txt'\
    ,'./Pathways_AnaResult_HS_30.txt','./Pathways_AnaResult_HS_31.txt','./Pathways_AnaResult_HS_38.txt','./Pathways_AnaResult_HS_63.txt'\
    ,'./Pathways_AnaResult_HS_64.txt','./Pathways_AnaResult_HS_65.txt','./Pathways_AnaResult_HS_66.txt','./Pathways_AnaResult_HS_67.txt'\
    ,'./Pathways_AnaResult_HS_68.txt','./Pathways_AnaResult_HS_69.txt','./Pathways_AnaResult_HS_70.txt','./Pathways_AnaResult_HS_71.txt'\
    ,'./Pathways_AnaResult_HS_77.txt']
# Store = ['./Pathways_AnaResult_HS_77.txt']

for file in range(len(filename)):
    # Store_fileName = f'/home/chc620/RING-intel/Upcycling_r1/Pathways_AnaResult_HS_{file}.txt'
    # Store_fileName = f'/home/chc620/RING-intel/Upcycling_r1/Pathways_AnaResult_HS_100.txt'
    Store_fileName = Store[file]
    ftxt = open(Store_fileName, 'w')
    # print(f'Pathways_AnaResult_{file}')
    f = pd.read_csv(filename[file], header=2,dtype=str) #skiprows=2
    # print(len(f))

    Header = list(f.columns.values)[0]
    ftxt.write('%s\n' % Header) # Pathways to xxx molecule
    ftxt.write('T = 298.15K\n')
    ftxt.write('Reaction\t\u0394Hrxn[kJ/mol]\t\u0394Srxn[J/mol/K]\t\u0394Grxn[kJ/mol]\n')

    target_mol = Header[13:].strip() #use .strip() to remove any blank in the string.
    # if the target_mol is as simple as CC only, the original script won't work due to all line has CC
    # target_mol = '>>CC'
    # print(target_mol)

    numbering = 1
    T= 298.15

    G_list, RXN_list, G_list_max, RXN_list_max, pathway_index = [], [], [], [], []

    for l in range(len(f)):
        # print(f.iat[l,0])
        H_reactants = 0
        H_products = 0
        S_reactants = 0
        S_products = 0

        if "the above pathway" in f.iat[l,0]:
            G_list, RXN_list = [], []
        else:
            pass

        if f.iat[l,0][:(len(reactants[file])+1)] == reactants[file]+'>':
            # if "rule" in f.iat[l-1,0]:
            ftxt.write('Pathway%s\n' % numbering)
            # else:
                # pass
        else:
            pass    # print('Pathway%s\n' % numbering)

        if ">>" in f.iat[l,0]:
            rxn_list = re.split('[.\>>]',f.iat[l,0])
            # print(rxn_list)
            empty = ''
            slice_idx = int([count for count, element in enumerate(rxn_list) if element == empty][0])
            # print(slice_idx)
            for reactant in rxn_list[0:slice_idx]:
                # print('Reactant:', reactant)
                dset_Enthalpy = propertiesTorchANI_h5py['%s/Enthalpy_H' % reactant]
                dset_Entropy = propertiesTorchANI_h5py['%s/Entropy_S' % reactant]

                H_reactants += dset_Enthalpy[0]
                S_reactants += dset_Entropy[0]
                # print('%s: %s [kJ/mol], %s [J/mol/K]' % (reactant,dset_Enthalpy[0], dset_Entropy[0]))
                # print('H_reactants', H_reactants)

            for product in rxn_list[(slice_idx+1):]:
                # print('Product:', product)
                dset_Enthalpy = propertiesTorchANI_h5py['%s/Enthalpy_H' % product]
                dset_Entropy = propertiesTorchANI_h5py['%s/Entropy_S' % product]

                H_products += dset_Enthalpy[0]
                S_products += dset_Entropy[0]
                # print('%s: %s [kJ/mol], %s [J/mol/K]' % (product,dset_Enthalpy[0], dset_Entropy[0]))
                # print('H_products',H_products)


            H_rxn = H_products - H_reactants
            S_rxn = S_products - S_reactants
            G_rxn = H_rxn - T*S_rxn/1000

            G_list.append(G_rxn)
            RXN_list.append(f.iat[l,0])

            ftxt.write('%s\t%s\t%s\t%s\n' \
            % (f.iat[l,0],round(H_rxn,2),round(S_rxn,2), round(G_rxn,2)))
            #
            # ftxt.write('%s,%s,%s,%s\n' \
            # % (f.iat[l,0],round(H_rxn,2),round(S_rxn,2), round(G_rxn,2)))

            # ftxt.write('%s\u0394Hrxn=%s [kJ/mol] ,\u0394Srxn=%s[J/mol/K] ,\u0394Grxn=%s [kJ/mol]\n' \
            # % (f.iat[l,0],round(H_rxn,2),round(S_rxn,2), round(G_rxn,2)))
        else:
            pass
        if target_mol in f.iat[l,0]:
            # print(f.iat[l,0])
            # ftxt.write('End of Pathway %s\n' % numbering)
            index_max = max(range(len(G_list)), key=G_list.__getitem__)
            pathway_index.append(numbering)
            RXN_list_max.append(RXN_list[index_max])
            G_list_max.append(round(G_list[index_max],2))
            numbering += 1
        else:
            pass

    # ftxt.write('Highest \u0394Grxn in each Pathway:\n')
    # for i in range(numbering-1):
    #     ftxt.write('Pathway %s :\t%s\t%s[kJ/mol]\n' % (pathway_index[i],RXN_list_max[i],G_list_max[i]))


    # list all Pathway # who has lowest Grxn
    index_min = min(range(len(G_list_max)), key=G_list_max.__getitem__)
    # print('index_min',index_min)
    Duplicated_G_list_max = G_list_max
    Duplicated_G_list_max = remove_duplicate(Duplicated_G_list_max)
    Duplicated_G_list_max.sort()
    # print('Max. delta G list:',Duplicated_G_list_max)
    value_Secondmin_G = Duplicated_G_list_max[1]

    index_min_rep = []
    for i in range(len(G_list_max)):
        if G_list_max[i] == G_list_max[index_min]:
            index_min_rep.append(pathway_index[i])
    # ftxt.write('Highest \u0394Grxn in all Pathways: %s\nRxn: %s\nIn Pathway %s.' % (G_list_max[index_max], RXN_list_max[index_max], pathway_index[index_max]))
    index_Secondmin_rep = []
    for i in range(len(G_list_max)):
        if G_list_max[i] == value_Secondmin_G:
            index_Secondmin_rep.append(pathway_index[i])
    # print(index_min_rep)
    # print(index_Secondmin_rep)
    ftxt.close()

    # ftxt = open(Store_fileName, 'r+')
    # contents = ftxt.readlines()
    # RXN_list_index = index_Secondmin_rep[0]-1
    # summary = 'Second Min. \u0394Grxn over all Pathways: %s[kJ/mol]\n%s\nIn Pathway %s\n' % (value_Secondmin_G, RXN_list_max[RXN_list_index], index_Secondmin_rep)
    # contents.insert(2,summary)
    # ftxt.seek(0)
    # ftxt.truncate()
    # ftxt.writelines(contents)
    # ftxt.close()

    ftxt = open(Store_fileName, 'r+')
    contents = ftxt.readlines()
    summary = 'Min. \u0394Grxn over all Pathways: %s[kJ/mol]\n%s\nIn Pathway %s\n' % (G_list_max[index_min], RXN_list_max[index_min], index_min_rep)
    contents.insert(2,summary)
    ftxt.seek(0)
    ftxt.truncate()
    ftxt.writelines(contents)
    ftxt.close()
