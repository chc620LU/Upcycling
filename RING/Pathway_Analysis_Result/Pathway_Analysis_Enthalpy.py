"""
Created on Thr Aug 19 13:36:00 2021

@author: chc620

Purpose: Import pathways generated by RING and calculate the thermo properties for each pathways
"""

import numpy as np
import pandas as pd
import re
import os
import h5py

#call database
h5py_filename = "./molecule_properties_June15"

propertiesTorchANI_h5py = h5py.File('%s.hdf5' % h5py_filename , 'r')

def remove_duplicate(list_to_clear):
    return list(dict.fromkeys(list_to_clear))


"""
for multiple files with pattern name
"""
filename = []
reactants= []

for N in range(78):
    AA_file = '../Isomerization_included/Pathways_AA_%s.txt' % N
    filename.append(AA_file)
    reactants.append('C(CCCCCCCC)C')

for file in range(len(filename)):
    Store_fileName = f'./Pathways_AnaResult_AA_July30_{file}.txt'
    ftxt = open(Store_fileName, 'w')
    f = pd.read_csv(filename[file], header=2,dtype=str)

    Header = list(f.columns.values)[0]
    ftxt.write('%s\n' % Header) # Pathways to xxx molecule
    ftxt.write('T = 298.15K\n')
    ftxt.write('Reaction\t\u0394Hrxn[kJ/mol]\t\u0394Srxn[J/mol/K]\t\u0394Grxn[kJ/mol]\n')

    target_mol = Header[13:].strip() #use .strip() to remove any blank in the string.
    # if the target_mol is as simple as CC only, the original script won't work due to all line has CC
    # target_mol = '>>CC'
    # print(target_mol)

    numbering = 1
    T= 298.15

    G_list, RXN_list, G_list_max, RXN_list_max, pathway_index = [], [], [], [], []

    for l in range(len(f)):
        H_reactants = 0
        H_products = 0
        S_reactants = 0
        S_products = 0

        if "the above pathway" in f.iat[l,0]:
            G_list, RXN_list = [], []
        else:
            pass

        if f.iat[l,0][:len(reactants[file])] == reactants[file]:
            ftxt.write('Pathway%s\n' % numbering)
            # print('Pathway%s\n' % numbering)
        else:
            pass


        if ">>" in f.iat[l,0]:
            rxn_list = re.split('[.\>>]',f.iat[l,0])
            empty = ''
            slice_idx = int([count for count, element in enumerate(rxn_list) if element == empty][0])

            for reactant in rxn_list[0:slice_idx]:
                dset_Enthalpy = propertiesTorchANI_h5py['%s/Enthalpy_H' % reactant]
                dset_Entropy = propertiesTorchANI_h5py['%s/Entropy_S' % reactant]

                H_reactants += dset_Enthalpy[0]
                S_reactants += dset_Entropy[0]

            for product in rxn_list[(slice_idx+1):]:
                dset_Enthalpy = propertiesTorchANI_h5py['%s/Enthalpy_H' % product]
                dset_Entropy = propertiesTorchANI_h5py['%s/Entropy_S' % product]

                H_products += dset_Enthalpy[0]
                S_products += dset_Entropy[0]


            H_rxn = H_products - H_reactants
            S_rxn = S_products - S_reactants
            G_rxn = H_rxn - T*S_rxn/1000

            G_list.append(G_rxn)
            RXN_list.append(f.iat[l,0])

            ftxt.write('%s\t%s\t%s\t%s\n' \
            % (f.iat[l,0],round(H_rxn,2),round(S_rxn,2), round(G_rxn,2)))
        else:
            pass

        if target_mol in f.iat[l,0]:
            print(f.iat[l,0])
            index_max = max(range(len(G_list)), key=G_list.__getitem__)
            pathway_index.append(numbering)
            RXN_list_max.append(RXN_list[index_max])
            G_list_max.append(round(G_list[index_max],2))
            numbering += 1
        else:
            pass


    # list all Pathway # who has lowest Grxn
    index_min = min(range(len(G_list_max)), key=G_list_max.__getitem__)
    Duplicated_G_list_max = G_list_max
    Duplicated_G_list_max = remove_duplicate(Duplicated_G_list_max)
    Duplicated_G_list_max.sort()
    value_Secondmin_G = Duplicated_G_list_max[1]

    index_min_rep = []
    for i in range(len(G_list_max)):
        if G_list_max[i] == G_list_max[index_min]:
            index_min_rep.append(pathway_index[i])

    index_Secondmin_rep = []
    for i in range(len(G_list_max)):
        if G_list_max[i] == value_Secondmin_G:
            index_Secondmin_rep.append(pathway_index[i])
    ftxt.close()

    ftxt = open(Store_fileName, 'r+')
    contents = ftxt.readlines()
    summary = 'Min. \u0394Grxn over all Pathways: %s[kJ/mol]\n%s\nIn Pathway %s\n' % (G_list_max[index_min], RXN_list_max[index_min], index_min_rep)
    contents.insert(2,summary)
    ftxt.seek(0)
    ftxt.truncate()
    ftxt.writelines(contents)
    ftxt.close()
